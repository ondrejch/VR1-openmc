#!/usr/bin/env python3
"""
VR-1 Lattice Builder Demo Script

This script demonstrates the VR-1 Lattice Builder GUI functionality
and shows how to use it programmatically.

Usage:
    python demo_lattice_builder.py [--cli]
    
    Without --cli: Launches the GUI (requires tkinter)
    With --cli: Runs CLI demonstration
"""

import sys
import argparse

def cli_demo():
    """Command line demonstration of lattice building functionality"""
    print("=" * 60)
    print("VR-1 Reactor Lattice Builder - CLI Demonstration")
    print("=" * 60)
    
    # Import functionality
    import copy
    
    component_types = [
        'w',      # Water cell with grid
        '8',      # 8-tube FA  
        '6',      # 6-tube FA
        '4',      # 4-tube FA
        'X',      # 6-tube FA with fully inserted control rod
        'O',      # 6-tube FA with fully removed control rod
        'd',      # Empty fuel dummy
        'rt',     # Dummy with rabbit tube
        'wrc',    # Empty water cell
        'v90',    # Vertical channel 90mm
        'v56',    # Vertical channel 56mm
        'v30',    # Vertical channel 30mm
        'v25',    # Vertical channel 25mm
        'v12',    # Vertical channel 12mm
    ]
    
    component_descriptions = {
        'w': 'Water cell with grid',
        '8': '8-tube Fuel Assembly',
        '6': '6-tube Fuel Assembly', 
        '4': '4-tube Fuel Assembly',
        'X': '6-tube FA with inserted control rod',
        'O': '6-tube FA with removed control rod',
        'd': 'Empty fuel dummy',
        'rt': 'Dummy with rabbit tube',
        'wrc': 'Empty water cell',
        'v90': 'Vertical channel (90mm)',
        'v56': 'Vertical channel (56mm)',
        'v30': 'Vertical channel (30mm)',
        'v25': 'Vertical channel (25mm)',
        'v12': 'Vertical channel (12mm)',
    }
    
    print("\nAvailable component types:")
    for i, comp in enumerate(component_types):
        desc = component_descriptions.get(comp, comp)
        print(f"  {i+1:2}. {comp:>4} - {desc}")
    
    # Default lattice from VR1_EMPTY_LATTICE_TEMPLATE
    default_lattice = [
        ['0', '1', '2', '3', '4', '5', '6', '7'],
        ['1', 'w', 'w', 'w', 'w', 'w', 'w', 'w'],
        ['2', 'w', 'w', 'w', 'w', 'w', 'w', 'w'],
        ['3', 'w', 'w', 'w', 'w', 'w', 'w', 'w'],
        ['4', 'w', 'w', 'w', 'w', 'w', 'w', 'w'],
        ['5', 'w', 'w', 'w', 'w', 'w', 'w', 'w'],
        ['6', 'w', 'w', 'w', 'w', 'w', 'w', 'w'],
        ['7', 'w', 'w', 'w', 'w', 'w', 'w', 'w'],
    ]
    
    print(f"\nDefault lattice (8x8 grid):")
    display_lattice(default_lattice)
    
    # Create example configuration
    example_lattice = copy.deepcopy(default_lattice) 
    
    # Build a more interesting configuration
    example_lattice[2][2] = '8'  # 8-tube FA
    example_lattice[2][3] = '8'
    example_lattice[2][4] = '8'
    example_lattice[2][5] = '8'
    
    example_lattice[3][2] = '6'  # 6-tube FA  
    example_lattice[3][3] = 'X'  # Control rod inserted
    example_lattice[3][4] = 'rt' # Rabbit tube
    example_lattice[3][5] = '6'
    
    example_lattice[4][2] = '8'
    example_lattice[4][3] = '6'
    example_lattice[4][4] = 'v56'  # Vertical channel
    example_lattice[4][5] = '6'
    
    example_lattice[5][2] = 'd'   # Dummy
    example_lattice[5][3] = 'd'
    example_lattice[5][4] = 'O'   # Control rod withdrawn
    example_lattice[5][5] = 'd'
    
    print(f"\nExample configuration:")
    display_lattice(example_lattice)
    
    # Test save functionality
    filename = "/tmp/example_custom_lattice.py"
    save_lattice(example_lattice, filename)
    print(f"\n✓ Example configuration saved to: {filename}")
    
    # Show how to use with VR1 classes
    print(f"\nUsage with VR-1 classes:")
    print("from vr1.core import TestLattice")
    print("from example_custom_lattice import CUSTOM_LATTICE") 
    print("my_core = TestLattice(lattice_str=CUSTOM_LATTICE)")
    
    print(f"\n✓ CLI demonstration completed successfully!")

def display_lattice(lattice):
    """Display lattice in a nice format"""
    print("     " + "  ".join(lattice[0]))
    print("   " + "-" * 32)  
    for i, row in enumerate(lattice[1:], 1):
        row_str = f" {i} | " + "  ".join(f"{cell:>2}" for cell in row[1:])
        print(row_str)

def save_lattice(lattice, filename):
    """Save lattice to Python file"""
    with open(filename, 'w') as f:
        f.write('"""Custom VR-1 reactor lattice configuration"""\n\n')
        f.write('# Generated by VR-1 Lattice Builder\n\n')
        f.write('CUSTOM_LATTICE = [\n')
        for row in lattice:
            f.write(f'    {row},\n')
        f.write(']\n\n')
        f.write('# Usage example:\n')
        f.write('# from vr1.core import TestLattice\n')
        f.write('# from custom_lattice import CUSTOM_LATTICE\n') 
        f.write('# my_core = TestLattice(lattice_str=CUSTOM_LATTICE)\n')

def gui_demo():
    """Launch the GUI version"""
    print("Launching VR-1 Lattice Builder GUI...")
    try:
        # Import and run the GUI  
        import os
        os.environ.setdefault('PYTHONPATH', '/home/runner/work/VR1-openmc/VR1-openmc')
        
        from vr1.utils import launch_lattice_builder
        launch_lattice_builder()
    except ImportError as e:
        print(f"GUI not available: {e}")
        print("This may be because tkinter is not installed.")
        print("Try installing python3-tk package or run with --cli flag.")
        return False
    except Exception as e:
        print(f"Error launching GUI: {e}")
        return False
    return True

def main():
    parser = argparse.ArgumentParser(description="VR-1 Lattice Builder Demo")
    parser.add_argument('--cli', action='store_true', 
                       help='Run CLI demonstration instead of GUI')
    
    args = parser.parse_args()
    
    if args.cli:
        cli_demo()
    else:
        success = gui_demo()
        if not success:
            print("\nFalling back to CLI demonstration...")
            cli_demo()

if __name__ == "__main__":
    main()