import openmc
import matplotlib.pyplot as plt
import os
from vr1.materials import vr1_materials


class PlotManager:
    """
    PlotManager Class:
        A class to manage the creation, configuration, and display of plots using a specified model and settings.
    Parameters:
        - model (type): The model object to be used for initialization.
        - settings (dict): Configuration settings, with an optional 'resolution' key to override the default resolution.
    Processing Logic:
        - The constructor sets up default resolution and an internal dictionary for mapping material types to colors.
        - Defines a set of standard plot configurations to be used in plot creation.
    """
    def __init__(self, model, settings):
        """Initialize the object with a model and settings, setup default resolution and material colors, and define plot configurations.
        Parameters:
            - model (type): The model object to be used for initialization.
            - settings (dict): Configuration settings, with an optional 'resolution' key to override the default resolution.
        Returns:
            - None: This constructor method does not return a value."""
        self.model = model
        self.settings = settings
        self.resolution = settings.get('resolution', 1000)
        self.material_colors = {
            vr1_materials.water: 'royalblue',
            vr1_materials.cladding: 'silver',
            vr1_materials.fuel: 'lightcoral',
            vr1_materials.dummy: 'slategrey'
        }
        self.plot_defs = [
            {
                'filename': 'plot_xy',
                'width': (350, 350),
                'basis': 'xy',
                'origin': (0, 0, 0)
            },
            {
                'filename': 'plot_xz',
                'width': (700, 700),
                'basis': 'xz',
                'origin': (0, 0, 0)
            },
            {
                'filename': 'plot_yz',
                'width': (500, 500),
                'basis': 'yz',
                'origin': (0, 0, 0)
            }
        ]

    def create_plots(self):
        """Creates and configures a list of plots based on predefined plot definitions.
        Parameters:
            - self: Instance of the class containing plot definitions and configurations.
        Returns:
            - list: A list of configured OpenMC Plot objects."""
        plots = []
        for p in self.plot_defs:
            plot = openmc.Plot()
            plot.filename = p['filename']
            plot.width = p['width']
            plot.pixels = (self.resolution, self.resolution)
            plot.color_by = 'material'
            plot.colors = self.material_colors
            plot.show_overlaps = True
            plot.show_outline = True
            plot.basis = p['basis']
            plot.origin = p['origin']
            plots.append(plot)
        plot_file = openmc.Plots(plots)
        plot_file.export_to_xml()
        return plots

    def run_and_display(self, display_plots=True):
        """Run and display geometry plots generated by OpenMC.
        Parameters:
            - display_plots (bool): Determines whether to display the generated plots within a Jupyter notebook. Default is True.
        Returns:
            - None: This function does not return any value, but generates PNG files and optionally displays them."""
        self.create_plots()
        # Generate PNGs using OpenMC's Python API
        openmc.plot_geometry(output=True)
        print("Plots generated!")
        # Optionally display them in Jupyter
        if display_plots:
            fig, axes = plt.subplots(1, 3, figsize=(15, 5))
            filenames = ['plot_xy.png', 'plot_xz.png', 'plot_yz.png']
            titles = ['XY Plot (z=0)', 'XZ Plot (y=0)', 'YZ Plot (x=0)']
            for ax, fname, title in zip(axes, filenames, titles):
                if os.path.exists(fname):
                    ax.imshow(plt.imread(fname))
                    ax.set_title(title)
                    ax.axis('on')
                else:
                    ax.set_title(f"{title}\n(Not found)")
                    ax.axis('off')
            plt.tight_layout()
            plt.show()


def test_plots() -> openmc.Plots:
    """Generate a set of OpenMC plot objects with predefined configurations.
    This function creates a series of 2D plots of a nuclear system using the OpenMC plotting capabilities. The plots are based on both cell and material compositions with specified dimensions and resolutions.
    Parameters:
        - None
    Returns:
        - openmc.Plots: A collection of OpenMC plot objects, each configured with specific attributes such as filename, width, resolution, origin, coloring strategy (cell or material), and basis (xy or yz)."""
    resolution: int = 5000
    materials = vr1_materials
    material_colors: dict = {
    materials.water: 'royalblue',
    materials.cladding: 'silver',
    materials.fuel: 'lightcoral',
    materials.dummy: 'slategrey'
}
    # Everything hardcoded for tests
    plot = openmc.Plot()
    plot.filename = 'plot_xy.png'
    plot.width = (100, 100)
    plot.pixels = (resolution, resolution)
    plot.origin = (0, 0, 30)
    plot.color_by = 'cell'
    plot.basis = 'xy'

    plotf = openmc.Plot()
    plotf.filename = 'plot_xy_m.png'
    plotf.width = (100, 100)
    plotf.pixels = (resolution, resolution)
    plotf.origin = (0, 0, 30)
    plotf.color_by = 'material'
    plotf.colors = material_colors
    plotf.basis = 'xy'

    plot1 = openmc.Plot()
    plot1.filename = 'plot_yz.png'
    plot1.width = (100, 200)
    plot1.pixels = (resolution, resolution)
    plot1.origin = (0, 0, 30)
    plot1.color_by = 'cell'
    plot1.basis = 'yz'

    plot1f = openmc.Plot()
    plot1f.filename = 'plot_yz_m.png'
    plot1f.width = (100, 200)
    plot1f.pixels = (resolution, resolution)
    plot1f.origin = (0, 0, 30)
    plot1f.color_by = 'material'
    plot1f.colors = material_colors
    plot1f.basis = 'yz'

    def create_plots(self):
        """Creates visual plots based on predefined plot definitions.
        Parameters:
            - None
        Returns:
            - list: A list of openmc.Plot objects that were created, configured, and exported to XML."""
        plots = []
        for p in self.plot_defs:
            plot = openmc.Plot()
            plot.filename = p['filename']
            plot.width = p['width']
            plot.pixels = (self.resolution, self.resolution)
            plot.color_by = 'material'
            plot.colors = self.material_colors
            plot.show_overlaps = True
            plot.show_outline = True
            plot.basis = p['basis']
            plot.origin = p['origin']
            plots.append(plot)
        plot_file = openmc.Plots(plots)
        plot_file.export_to_xml()
        return plots

    return openmc.Plots([plot, plotf, plot1, plot1f])
